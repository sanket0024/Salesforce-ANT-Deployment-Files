<project name="Sample usage of Salesforce Ant tasks" default="deploy" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username.beta" value="">
      <not>
        <isset property="sf.username.beta"/>
      </not>
    </condition>
    <condition property="sf.password.beta" value="">
      <not>
        <isset property="sf.password.beta"/>
      </not>
    </condition>
    <condition property="sf.username.qa" value="">
      <not>
        <isset property="sf.username.qa"/>
      </not>
    </condition>
    <condition property="sf.password.qa" value="">
      <not>
        <isset property="sf.password.qa"/>
      </not>
    </condition>
    <condition property="sf.username.prod" value="">
      <not>
        <isset property="sf.username.prod"/>
      </not>
    </condition>
    <condition property="sf.password.prod" value="">
      <not>
        <isset property="sf.password.prod"/>
      </not>
    </condition>
    <condition property="sf.sessionId" value="">
      <not>
        <isset property="sf.sessionId"/>
      </not>
    </condition>
    <condition property="isBeta" value="false">
      <contains string="${env.JOB_NAME}" substring="CI-beta"></contains>
    </condition>
    <condition property="isQA" value="false">
      <contains string="${env.JOB_NAME}" substring="CI-qa"></contains>
    </condition>
    <condition property="isProd" value="false">
      <contains string="${env.JOB_NAME}" substring="CI-prod"></contains>
    </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <!-- <target name="test">
      <delete dir="retrieveOutput"/>
      <mkdir dir="retrieveOutput"/>
      <sf:retrieve
  	  	username="${sf.username}"
    		password="${sf.password}"
    		serverurl="${sf.serverurl}"
    		maxPoll="${sf.maxPoll}"
    		retrieveTarget="retrieveOutput"
    		unpackaged="package.xml"/>
    </target> -->

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <!-- Retrieve the contents into another directory -->
    <!-- <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target> -->

    <!-- Retrieve all the items of a particular metadata type -->
    <!-- <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target> -->

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <!-- <target name="retrievePkg">
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target> -->

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deploy" depends="deploy-beta, deploy-qa"></target>
    <target name="deploy-beta" if="isBeta">
		<echo message="Job Name: ${env.JOB_NAME}"/>
		<echo message="Org Username: ${sf.username.beta}"/>
      <sf:deploy
        username="${sf.username.beta}"
        password="${sf.password.beta}"
        serverurl="${sf.serverurl}"
        maxPoll="${sf.maxPoll}"
        deployRoot="./force-app/main/default"
        rollbackOnError="true"
		allowMissingFiles="true"/>
    </target>
    <target name="deploy-qa" if="isQA">
	  <echo message="Job Name: ${env.JOB_NAME}"/>
		<echo message="Org Username: ${sf.username.qa}"/>
      <sf:deploy
        username="${sf.username.qa}"
        password="${sf.password.qa}"
        serverurl="${sf.serverurl}"
        maxPoll="${sf.maxPoll}"
        deployRoot="./force-app/main/default"
        rollbackOnError="true"
        allowMissingFiles="true"/>
    </target>
    <!-- <target name="deploy-prod" if="isProd">
	  <echo message="Job Name: ${env.JOB_NAME}"/>
		<echo message="Org Username: ${sf.username.prod}"/>
      <sf:deploy
        username="${sf.username.prod}"
        password="${sf.password.prod}"
        serverurl="${sf.serverurl.prod}"
        maxPoll="${sf.maxPoll}"
        deployRoot="./force-app/main/default"
        rollbackOnError="true"
        allowMissingFiles="true"/>
    </target> -->

    <!-- Deploy a zip of metadata files to the org -->
    <!-- <target name="deployZip">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000" rollbackOnError="true"/>
    </target> -->

    <!-- Shows deploying code & running tests for code in directory -->
    <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
    <!-- <target name="deployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunSpecifiedTests" rollbackOnError="true">
      	 <runTest>SampleDeployClass</runTest> 
      </sf:deploy>
    </target> -->
	
	 <!-- Shows deploying code with no TestLevel sepcified -->
    <!-- <target name="deployCodeNoTestLevelSpecified">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"/>
    </target> -->
	
	<!-- Shows deploying code and running tests only within the org namespace -->
	<!-- <target name="deployCodeRunLocalTests">
	  <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"  testlevel="RunLocalTests"/>
	</target> -->
	
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <!-- <target name="undeployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target> -->

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
    <!-- <target name="retrieveCode">
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="codepkg" unpackaged="codepkg/package.xml"/>
    </target> -->

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <!-- Upload the contents of the "codepkg" package, running all tests -->
    <!-- <target name="deployCodeFailingTest">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target> -->

    <!-- Shows check only; never actually saves to the server -->
    <!-- <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" checkOnly="true"/>
    </target> -->
	
	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<!-- <target name="quickDeploy">
	  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target> -->
	
	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<!-- <target name="cancelDeploy">
	  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target> -->

	<!-- Retrieve the information of all items of a particular metadata type -->
    <!-- <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target> -->

	<!-- Retrieve the information on all supported metadata type -->
    <!-- <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>
    </target> -->
</project>
